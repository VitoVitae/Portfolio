import numpy as np
import pandas as pd
from math import sqrt
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt


# extraction des données de la vue
data_debase= pd.read_csv("data_s204_p3.csv")
data_debase_np = data_debase.to_numpy()


uai = np.array(data_debase["uai"].to_numpy())
data_debase_np = data_debase_np[:,1:]

# Fonction centrer reduire
def Centreduire(T):
    T = np.array(T,dtype=np.float64)
    (n,p) = T.shape
    Moyennes = np.mean(T, 0)
    EquartTypes = np.std(T, 0)
    Res = np.eye(n,p)
    for j in range(p):
            Res[:,j]= (T[:,j]-Moyennes[j])/EquartTypes[j]
    return Res

debaseCR = Centreduire(data_debase_np)

Y = debaseCR[:,-1]
X = debaseCR[:,(0,1,2,3,4)]


data_debase_np1 = data_debase_np[:,-1]
data_debase_np0 = data_debase_np[:,(0,1,2,3,4)]

def DiagBatons(Colonne, nomF):
    m = np.amin(Colonne) # m contient la valeur minimale de la colonne
    M= np.amax(Colonne) # M contient la valeur maximale de la colonne

    inter = np.linspace(m, M, 21)
    plt.figure()
    plt.xlabel(nomF)
    plt.ylabel("Nombre d'occurences")
    plt.hist(Colonne,inter, histtype='bar', rwidth=0.8)
    plt.show()
    return


Colonnes0 = data_debase.columns.to_numpy()
Colonnes0 = Colonnes0[1:-1]

for i in range(len(X[0])):
    DiagBatons(data_debase_np0[:,i], Colonnes0[i])

# Matrice de Covariance
MatCovar = np.cov(X,rowvar=False)

# concersion Matrice de covariance en CSV
# np.savetxt("mat_covar.csv", MatCovar, delimiter=",")

def Ypred(coeffs, x0, x1, x2, x3, x4):
     return coeffs[0]*x0 + coeffs[1]*x1 + coeffs[2]*x2 +coeffs[2]*x2 +coeffs[3]*x3 +coeffs[4]*x4

def Var(X):
    N=X.shape[0]
    Xm=sum(X)/N
    return sum((X-Xm)*(X-Xm))/N


# Régression linéaire
linear_regression = LinearRegression()
linear_regression.fit(X, Y)
coeffs = linear_regression.coef_

# coeffs = [-0.016198    0.37019038  0.10093067  0.03996232  0.22177069]
# donc le nb de "a" dans le mon de la commune négativement positivement la variable Y
# donc la latitude influence positivement la variable Y
# donc la longitude  influence positivement la variable Y# donc le nb de sanglier prélever influence positivement la variable Y
# donc le taux de reussite influence positivement la variable Y
# donc le nombre de candidat  influence positivement la variable Y

def CoeffMult(coeffs, X, Y):
    res = 0
    N = len(Y)
    for i in range(N):
        res += (Ypred(coeffs,X[i,0],X[i,1],X[i,2],X[i,3],X[i,4]) - Y[i])**2
    res = res /  (Var(Y)*N)
    res = 1 - res
    return sqrt(res)

print(CoeffMult(coeffs,X,Y)) # Coefficient multiple